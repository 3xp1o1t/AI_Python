# -*- coding: utf-8 -*-
"""Reconocimiento Facial.ipynb

Automatically generated by Colaboratory.

# Instalar los modulos de 2 maneras:


1.   Con el operador ! se instala pero no se mantiene el cambio.
2.   Con el operador magico %, se instala y se guarda el cambio.

---
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install face_recognition

import pickle
from imutils import paths
import face_recognition
import argparse
import cv2
import os

"""## Cargar archivos de Drive"""

# from google.colab import drive
# drive.mount('/content/drive')

"""## Cargamos nuestro Dataset con las imagenes de entrenamiento."""

# imagePaths = list(paths.list_images('dataset'))

"""## Procesamos las imagenes."""

# knownEncodings = []
# knownNames = []

# for (i, imagePath) in enumerate(imagePaths):
#	print("[INFO] Procesando imagen {}/{}".format(i + 1, len(imagePaths)))
#	name = imagePath.split(os.path.sep)[-2]
  
#	image = cv2.imread(imagePath)
#	rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

#	boxes = face_recognition.face_locations(rgb, model="hog")  # hog o cnn para dectectar la ubicacion de las caras.
#	encodings = face_recognition.face_encodings(rgb, boxes)

#	for encoding in encodings:
#		knownEncodings.append(encoding)
#		knownNames.append(name)

# print("[INFO] Serializando codificaciones...")
# data = {"encodings": knownEncodings, "names": knownNames}

# f = open("encodings.pickle", "wb")
# f.write(pickle.dumps(data))
# f.close()
# print('Finalizafo con exito.')

"""## Cargamos nuestros datos de entrenamiento:"""

data = pickle.loads(open('encodings.pickle', "rb").read())

"""## Cargamos una imagen de prueba, para hacer el reconocimiento:"""

image = cv2.imread('C:\\Users\\ASUS\\Documents\\Python Scripts\\Reconocimiento Facial\\ImagenesTest\\t7.jpg')
rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

print("[INFO] Reconociendo rostros...")
boxes = face_recognition.face_locations(rgb,
	model="hog")
encodings = face_recognition.face_encodings(rgb, boxes)

"""## Iniciamos el proceso de reconocimiento."""

# Lista para almacenar los nombres por cada rostro encontrado.
names = []

for encoding in encodings:
	# Intentamos localizar cada rostro con los datos de entrenamiento generados.
	matches = face_recognition.compare_faces(data["encodings"],
		encoding)
	name = "Desconocido"

	# Comprobamos si encontro alguno.
	if True in matches:
		# Busca los indices de cada rostro y asi contamos cuantas
    # veces fue encontrado ese rostro.
		matchedIdxs = [i for (i, b) in enumerate(matches) if b]
		counts = {}

		# Iteramos sobre cada rostro y marcamos cada rostro con el total de veces
    # que fue localizado.
		for i in matchedIdxs:
			name = data["names"][i]
			counts[name] = counts.get(name, 0) + 1

		# Determinamos el rostro encontrado acorde a numero de veces que fue
    # locazidado y comparado.
		name = max(counts, key=counts.get)
	
	# Agregamos el rostro a la imagen.
	names.append(name)

"""## Recorremos los rostros encontrados y dibujamos un rectangulo a su alrededor con su nombre."""

# Iteramos sobre cada rostro encontrado.
for ((top, right, bottom, left), name) in zip(boxes, names):
	# Dibujamos el rectangulo y el nombre del encontrado.
	cv2.rectangle(image, (left, top), (right, bottom), (0, 255, 0), 2)
	y = top - 15 if top - 15 > 15 else top + 15
	cv2.putText(image, name, (left, y), cv2.FONT_HERSHEY_SIMPLEX,
		0.75, (0, 255, 0), 2)

"""## Mostramos los resultados"""

# cv2.imshow tiene un bug que crashea jupyter, para solucionarlo
# importamos el parche echo por google y asi lo podemos usar.
# from google.colab.patches import cv2_imshow
# cv2_imshow(image)
cv2.imshow('Image', image)
cv2.waitKey(0)
